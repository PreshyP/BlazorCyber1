import { VersionSelectors } from '@pnpm/resolver-base';
import { PackageManifest } from '@pnpm/types';
import { RegistryPackageSpec } from './parsePref';
export interface PackageMeta {
    name: string;
    'dist-tags': Record<string, string>;
    versions: Record<string, PackageInRegistry>;
    time?: Record<string, string>;
    cachedAt?: number;
}
export interface PackageMetaCache {
    get: (key: string) => PackageMeta | undefined;
    set: (key: string, meta: PackageMeta) => void;
    has: (key: string) => boolean;
}
export declare type PackageInRegistry = PackageManifest & {
    dist: {
        integrity?: string;
        shasum: string;
        tarball: string;
    };
};
export interface PickPackageOptions {
    authHeaderValue?: string;
    publishedBy?: Date;
    preferredVersionSelectors: VersionSelectors | undefined;
    pickLowestVersion?: boolean;
    registry: string;
    dryRun: boolean;
}
declare const _default: (ctx: {
    fetch: (pkgName: string, registry: string, authHeaderValue?: string) => Promise<PackageMeta>;
    metaDir: string;
    metaCache: PackageMetaCache;
    cacheDir: string;
    offline?: boolean | undefined;
    preferOffline?: boolean | undefined;
    filterMetadata?: boolean | undefined;
}, spec: RegistryPackageSpec, opts: PickPackageOptions) => Promise<{
    meta: PackageMeta;
    pickedPackage: PackageInRegistry | null;
}>;
export default _default;
