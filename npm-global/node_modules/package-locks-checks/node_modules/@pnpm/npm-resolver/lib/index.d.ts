import PnpmError from '@pnpm/error';
import { FetchFromRegistry, GetCredentials, RetryTimeoutOptions } from '@pnpm/fetching-types';
import { PreferredVersions, ResolveResult, WantedDependency, WorkspacePackages } from '@pnpm/resolver-base';
import { PackageMeta, PackageMetaCache } from './pickPackage';
import parsePref, { RegistryPackageSpec } from './parsePref';
import { RegistryResponseError } from './fetch';
export declare class NoMatchingVersionError extends PnpmError {
    readonly packageMeta: PackageMeta;
    constructor(opts: {
        wantedDependency: WantedDependency;
        packageMeta: PackageMeta;
    });
}
export { parsePref, PackageMeta, PackageMetaCache, RegistryPackageSpec, RegistryResponseError, };
export interface ResolverFactoryOptions {
    cacheDir: string;
    fullMetadata?: boolean;
    filterMetadata?: boolean;
    offline?: boolean;
    preferOffline?: boolean;
    retry?: RetryTimeoutOptions;
    timeout?: number;
}
export default function createResolver(fetchFromRegistry: FetchFromRegistry, getCredentials: GetCredentials, opts: ResolverFactoryOptions): (wantedDependency: WantedDependency, opts: ResolveFromNpmOptions) => Promise<ResolveResult | null>;
export declare type ResolveFromNpmOptions = {
    alwaysTryWorkspacePackages?: boolean;
    defaultTag?: string;
    publishedBy?: Date;
    pickLowestVersion?: boolean;
    dryRun?: boolean;
    lockfileDir?: string;
    registry: string;
    preferredVersions?: PreferredVersions;
    preferWorkspacePackages?: boolean;
} & ({
    projectDir?: string;
    workspacePackages?: undefined;
} | {
    projectDir: string;
    workspacePackages: WorkspacePackages;
});
